
import com.ucd.hyperbuilding.EventsQueue;

agent TunstileQueue{
    module System system;
    module Console console;
    module Debug debug;
    module Strings strings;
    module Math math;
module EventsQueue queue;
types agentOntology{
    formula event_class_id_type_timeStamp(string, string, string, string);
    formula isUpdatingQueue(boolean);
    formula turnistileId(string);
    formula serverId(string);
    formula isPushing(boolean);
    formula isTurnistileProcessing(boolean);
   formula  cardEvent_cardId_turnstileId_timeStamp(string, string, string );
}
    initial isUpdatingQueue(false);
    initial isPushing(false);
    initial isTurnistileProcessing(false);

    rule +!main(list args) {
        console.println("Creating agent");
        console.println("Main" + at_index(args, 0, string));
        string id =  at_index(args, 0, string);
        string turnistileId = at_index(args, 1, string);
        string serverId  = at_index(args, 2, string);
        +turnistileId(turnistileId);
        +serverId(serverId);
        
        queue.init();

    }

    rule +!initQueue(): turnistileId(string tid) &  serverId(string sid)
    {
        console.println("initializing queue");
    }

    rule +!push() : isPushing(false) &  event_class_id_type_timeStamp(string class, string id ,
     string type , string timeStamp) & turnistileId(string tid) & isTurnistileProcessing(false) {
        console.println("pushing event, class=" + class);
        -event_class_id_type_timeStamp(class, id, type, timeStamp);
        send(request, tid,
        event_class_id_type_timeStamp(class, id, type, timeStamp));
        -+isTurnistileProcessing(true);
    }
    rule +!push(){

    }

 rule @message(request, string sender, 
     event_class_id_type_timeStamp(string class, string sensorId, string type , string timeStampSecods)) {
        console.println("Got sensor, sensorId=" + sensorId + ", type="+ type + ", timeStampSecods=" + timeStampSecods);
        wait(isUpdatingQueue(false));
        -+isUpdatingQueue(true);
        queue.AddEvent(class, sensorId, type, timeStampSecods);
        wait(isUpdatingQueue(false));
        debug.dumpBeliefs();
        !push();
    }

    rule @message(request, string sender, cardEvent_cardId_turnstileId_timeStamp(string cardId, 
    string tid, string timeStamp)) {
        console.println("Got card event, cardId=" + cardId);
        wait(isUpdatingQueue(false));
        -+isUpdatingQueue(true);
        debug.dumpBeliefs();
        queue.AddEvent("card",cardId, tid, timeStamp);
        wait(isUpdatingQueue(false));
        debug.dumpBeliefs();
        !push();
    }

    rule @message(request, string sender, isTurnistileProcessing(boolean is)){
        console.println("finish processing pushing new event");
        -+isTurnistileProcessing(false);
        debug.dumpBeliefs();
        !push();
    }

}