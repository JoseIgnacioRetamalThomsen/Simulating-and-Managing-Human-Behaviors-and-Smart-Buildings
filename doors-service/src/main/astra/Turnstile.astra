
import com.ucd.hyperbuilding.TurnstileAgentDataProcessor;
import com.ucd.hyperbuilding.Client;
agent Turnstile {//extends mams.ActiveMAMSAgent{
    module System system;
    module Console console;
    module Client client;
    module TurnstileAgentDataProcessor data;
    module Debug debug;
    module Strings strings;
    module Math math;

    types agentOntology{
        formula serverAgent(string);
        formula cardReader_url(string);//to remove
        formula thingProcessed(boolean);
        formula daoAgent(string);
        formula queueAgent(string);
        formula turnistileAgent_id_url_queueid(string, string, string);
        formula cardEvent(string);
        formula toggleUrl(string);
        formula statusUrl(string);
        formula doorStatus(string);
        formula sensor_id_url(string, string);
        formula subscribeToTurnstileEvents_cardUrl_sensor1Url(string, string);
        formula event_class_id_type_timeStamp(string, string, string, string);
        formula sensorEnter_sensor_time(string, long);
        formula sensorFree_sensor_time(string, long);
        formula newSensorEvent_sensorId_type_timeStampSeconds(string, string, string);
        formula isSensor1Free(boolean);
        formula isSensor2Free(boolean);
        formula isSensor3Free(boolean);

        formula checkId(string);

        formula responseCode(int);
        formula processingEvent(boolean);
        formula isTurnistileProcessing(boolean);
        formula cardEvent_cardId_turnstileId_timeStamp(string, string, string);
        formula canOpen(string);
        formula  cardEventResponse_success(boolean );
  
        
    }
    inference canOpen("fromRight") :- doorStatus("closed")  & isSensor1Free(false)  & isSensor2Free(true) & isSensor3Free(true);
    inference canOpen("fromLeft") :- doorStatus("closed")  & isSensor1Free(true) & isSensor2Free(true)  & isSensor3Free(false);

     initial sensorFree_sensor_time("sensor1", 1l);
     initial sensorFree_sensor_time("sensor2", 1l);
     initial sensorFree_sensor_time("sensor3", 1l);
     initial sensorEnter_sensor_time("sensor1", 0l);
     initial sensorEnter_sensor_time("sensor2", 0l);
     initial sensorEnter_sensor_time("sensor3", 0l);
     initial processingEvent(false);
   
    rule +!main(list args) {
        console.println("Creating agent");
        console.println("Main" + at_index(args, 0, string));
        string id =  at_index(args, 0, string);
        string turnstileUrl = at_index(args, 1, string);
        string serverAgentName  = at_index(args, 2, string);
        string daoAgent = at_index(args, 3, string);
        string queueAgent = at_index(args, 4, string);
        +turnistileAgent_id_url_queueid(id, turnstileUrl, queueAgent);
        +serverAgent(serverAgentName);
        +daoAgent(daoAgent);
        +queueAgent(queueAgent);
        client.getRequest(turnstileUrl, int responseCode, string response);
        data.processTurnstileThing(response);
        wait(thingProcessed(true));
        console.println("thing processed");
        debug.dumpBeliefs();
        !initThing();

    }

    rule +!initThing(): 
    turnistileAgent_id_url_queueid(string id , string url, string qid) & 
    serverAgent(string serverAgentName) & 
    subscribeToTurnstileEvents_cardUrl_sensor1Url(string cardReaderUrl, string sensor1Url) {
        console.println("Sending Card reader , serverAgentName="+ serverAgentName);
        //subscribe agent
        send(request, serverAgentName, turnistileAgent_id_url_queueid(id, url, qid));
        //subscribe to card reader event
         send(request, serverAgentName, subscribeToTurnstileEvents_cardUrl_sensor1Url(
                cardReaderUrl, sensor1Url));
    }


//enter
    rule +!openDoor() : canOpen("fromRight")  & toggleUrl(string url) {
        !checkCard();
      
        // send(request, daoAGent, checkId("123"));
        // client.putRequest(url,"", int responseCode, string response);
     
        // debug.dumpBeliefs();
    }

    //out
    rule +!openDoor(): canOpen("fromLeft")  &  toggleUrl(string url){
        query(daoAgent(string daoAGent));
        !checkCard();
        
       
        // console.println("tryed to open door, responsecode="+responseCode );
        // !checkResponse(responseCode);
        // if(responseCode == 200){
        //     -doorStatus("closed");
        //     +doorStatus("open");
        // }
        debug.dumpBeliefs();
    }

     rule +!checkCard(): cardEvent_cardId_turnstileId_timeStamp(string cardId, string tid, string timestamp)
     & daoAgent(string daoAGent){
        send(request, daoAGent, cardEvent_cardId_turnstileId_timeStamp(cardId, tid, timestamp));
        console.println("SENT ");
      
    }


    rule @message(request, string sender,  cardEventResponse_success(boolean isSuccess)){
        +cardEventResponse_success(isSuccess);
        !checkResponseFromDB();
    }

    rule +!checkResponseFromDB(): cardEventResponse_success(true) &  toggleUrl(string url){
        client.putRequest(url,"", int responseCode, string response);
        console.println("Tried to open the door, response code="+ responseCode );
        !checkResponse(responseCode);      
    }

    rule +!checkResponseFromDB(){
        console.println("identification fails");
        !finishProcess();
    }

    rule +!checkResponse(int code): doorStatus("closed") & code == 200{
        -doorStatus("closed");
        +doorStatus("open");
        !finishProcess();
    }

 rule +!checkResponse(int code): doorStatus("closed") &  toggleUrl(string url){
        client.putRequest(url,"", int responseCode, string response);
        console.println("tryed to open door, responsecode="+responseCode );
        !checkResponse(responseCode);
    }


    rule +!openDoor(){
        console.println("FAILED TO OPEN DOOR");
        !finishProcess();
    }
    // rule @message(request, string sender, cardEvent(string cardId)) {
    //     console.println("Got card event, cardId=" + cardId);
    //     debug.dumpBeliefs();
    //     //mis check with agent database if open
    //     !openDoor();
    // }

    //  rule @message(request, string sender, 
    //  sensorEvent_sensorId_type_timeStampSeconds(string sensorId, string type , string timeStampSecods)) {
    //     console.println("Got sensor, sensorId=" + sensorId + ", type="+ type + ", timeStampSecods=" + timeStampSecods);
    //     +newSensorEvent_sensorId_type_timeStampSeconds(sensorId, type, timeStampSecods);
    //     !newSensor();
    //     !processEvents();
    //    // debug.dumpBeliefs();
    
    // }

     rule @message(request, string sender, event_class_id_type_timeStamp(string class, string sensorId, 
                    string type , string timeStampSecods)) {
        console.println("Got event ,class =" +class + " sensorId=" + sensorId + ", type="+ type + ", timeStampSecods=" + timeStampSecods);
        +event_class_id_type_timeStamp(class, sensorId, type, timeStampSecods);
       
       console.println("updating door status");
        query(statusUrl(string statusUrl));
        console.println("updating door status url= " + statusUrl);
client.getRequest(statusUrl, int responseCode, string response);
        console.println("RESPOSE++++++++++++++++++========="+response);
       data.updateStatus(response);
    
 
    -+processingEvent(true);
    !processEvent();
    // !newSensor();
    // !processEvents();
   // debug.dumpBeliefs();

}
        rule +! processEvent(): event_class_id_type_timeStamp("card",string cardId,string tid,string timeStamp){
       console.println("card event");
       -event_class_id_type_timeStamp("card", cardId, tid, timeStamp);
       +cardEvent_cardId_turnstileId_timeStamp(cardId, tid, timeStamp);
       !openDoor();
        // +newSensorEvent_sensorId_type_timeStampSeconds(sensorId, type, timeStamp);
        // !newSensor();
    }

    rule +! processEvent(): event_class_id_type_timeStamp("sensor",string sensorId,string type,string timeStamp){
       console.println("SENSOR EVENT");
       -event_class_id_type_timeStamp("sensor", sensorId, type, timeStamp);
        +newSensorEvent_sensorId_type_timeStampSeconds(sensorId, type, timeStamp);
        !newSensor();
    }

   
    rule +!newSensor():
    newSensorEvent_sensorId_type_timeStampSeconds(string sensorId, string type, string timeStampSecods) 
    {
        if (strings.equal(type ,"enter")){
            console.println("Enter, sensorId=" + sensorId + ", type="+ type + ", timeStampSecods=" 
            + timeStampSecods);
            -newSensorEvent_sensorId_type_timeStampSeconds(sensorId, type, timeStampSecods);
            query(sensorEnter_sensor_time(sensorId, long TimeStamp));
            -sensorEnter_sensor_time(sensorId,  TimeStamp);
            +sensorEnter_sensor_time(sensorId, math.longValue(timeStampSecods));
        } else{
            console.println("Exit, sensorId=" + sensorId + ", type="+ type + ", timeStampSecods=" + timeStampSecods);
            -newSensorEvent_sensorId_type_timeStampSeconds(sensorId, type, timeStampSecods);
            query(sensorFree_sensor_time(sensorId, long TimeStamp));
            -sensorFree_sensor_time(sensorId,  TimeStamp);
            +sensorFree_sensor_time(sensorId,math.longValue(timeStampSecods));
        }   
        !newSensor();
    }

    rule +!newSensor(){
        console.println("callin update status");
        !updateSensorsStatus();
    }

    rule +!updateSensorsStatus():
        sensorFree_sensor_time("sensor1", long sensor1FreeTimeStamp) &
        sensorFree_sensor_time("sensor2", long sensor2FreeTimeStamp) &
        sensorFree_sensor_time("sensor3", long sensor3FreeTimeStamp) &
        sensorEnter_sensor_time("sensor1" , long sensor1EnterTimeStamp) &
        sensorEnter_sensor_time("sensor2" , long sensor2EnterTimeStamp) &
        sensorEnter_sensor_time("sensor3" , long sensor3EnterTimeStamp) {
            
            
            if( sensor1FreeTimeStamp > sensor1EnterTimeStamp){
                -+isSensor1Free(true);
            }else{
                -+isSensor1Free(false);
            }
            if( sensor2FreeTimeStamp > sensor2EnterTimeStamp){
                -+isSensor2Free(true);
            }else{
                -+isSensor2Free(false);
            }
            if( sensor3FreeTimeStamp > sensor3EnterTimeStamp){
                -+isSensor3Free(true);
            }else{
                -+isSensor3Free(false);
            }
            debug.dumpBeliefs();
        
            !closeDoor();
            //!newSensor();
        }
        //right to left
    rule +!closeDoor() :isSensor2Free(true) & isSensor3Free(false) &  doorStatus("open") &
      toggleUrl(string url ) & sensorFree_sensor_time("sensor1", long sensor1FreeTimeStamp) 
      & sensorFree_sensor_time("sensor2", long sensor2FreeTimeStamp) & 
      sensor2FreeTimeStamp > sensor1FreeTimeStamp{
          client.putRequest(url,"", int responseCode, string response);
        console.println("tryed to cloass door, responsecode="+responseCode );
        !checkResponse(responseCode);
        // if(responseCode == 200){
        //     -doorStatus("open");
        //     +doorStatus("closed");
        // }

    }
 

    //left to right
    rule +!closeDoor() :isSensor2Free(true) & isSensor1Free(false) &  doorStatus("open") 
    &  toggleUrl(string url) &
    sensorFree_sensor_time("sensor2", long sensor2FreeTimeStamp) &
    sensorFree_sensor_time("sensor3", long sensor3FreeTimeStamp) &
    sensor2FreeTimeStamp > sensor3FreeTimeStamp {
        client.putRequest(url,"", int responseCode, string response);
        console.println("tryed to closs door, responsecode="+responseCode );
        !checkResponse(responseCode);

    }

    rule +!checkResponse(int code): doorStatus("open") & code == 200{
        console.println("door closed");
        -doorStatus("open");
        +doorStatus("closed");
        !finishProcess();
        
    }

 rule +!checkResponse(int code): doorStatus("open") &  toggleUrl(string url){
    system.sleep(100);
        client.putRequest(url,"", int responseCode, string response);
        console.println("tryed to clos door, responsecode="+responseCode );
        !checkResponse(responseCode);
    }

    rule +!closeDoor()  {
        !finishProcess();
    }

            
    rule +!finishProcess(): queueAgent(string queueAgent) {
        send(request, queueAgent, isTurnistileProcessing(false));
    }
}